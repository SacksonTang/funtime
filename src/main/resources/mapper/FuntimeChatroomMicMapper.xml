<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rzyou.funtime.mapper.FuntimeChatroomMicMapper">
  <resultMap id="BaseResultMap" type="com.rzyou.funtime.entity.FuntimeChatroomMic">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="room_id" jdbcType="BIGINT" property="roomId" />
    <result column="mic_location" jdbcType="INTEGER" property="micLocation" />
    <result column="mic_user_id" jdbcType="BIGINT" property="micUserId" />
    <result column="state"  property="state" />
    <result column="user_role"  property="userRole" />
    <result column="music_auth"  property="musicAuth" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />

  </resultMap>
  <sql id="Base_Column_List">
    id, room_id, mic_location, mic_user_id, create_time, update_time,state,user_role,music_auth
  </sql>

  <select id="checkMicChange" resultType="java.lang.Integer">
    select count(id) from t_funtime_chatroom_mic where room_id = #{roomId} and mic_location !=10 and mic_user_id is not null
  </select>
  <select id="getMicLocationUser"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_funtime_chatroom_mic
    where room_id = #{roomId} and mic_location = #{micLocation} and mic_location>0 limit 1
  </select>
  <select id="getMicLocationByRoomIdAndUser"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_funtime_chatroom_mic
    where room_id = #{roomId} and mic_user_id = #{userId} and mic_location>0 limit 1
  </select>
  <select id="getInfoByRoomIdAndUser"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_funtime_chatroom_mic
    where room_id = #{roomId} and mic_user_id = #{userId}  limit 1
  </select>
  <select id="checkUserIsInMic"  resultType="java.lang.Long">
    select
    room_id
    from t_funtime_chatroom_mic
    where  mic_user_id = #{userId} and mic_location>0 limit 1
  </select>
  <select id="getAllRoomUser" resultType="java.lang.String" >
    select
    mic_user_id
    from t_funtime_chatroom_mic
    where mic_user_id is not null
    group by mic_user_id
  </select>
  <select id="getAllRoomUserByLevel" resultType="java.lang.String">
    select
    mic_user_id
    from t_funtime_chatroom_mic m inner join t_funtime_user_account u on m.mic_user_id = u.user_id
    where u.level>=#{level}
  </select>

  <select id="getRoomUserInfoByUserId"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_funtime_chatroom_mic
    where  mic_user_id = #{userId}  limit 1
  </select>
  <select id="getRoomUserByRoomIdAll" resultType="java.lang.String" parameterType="java.lang.Long">
    select
    m.mic_user_id
    from t_funtime_chatroom_mic m inner join t_funtime_user u on m.mic_user_id = u.id
    where m.room_id = #{roomId} and u.online_state = 1

  </select>
  <select id="getRoomUserByRoomIdAll2" resultType="java.lang.String" >
    select
    u.portrait_address
    from t_funtime_chatroom_mic m inner join t_funtime_user u on m.mic_user_id = u.id
    where m.room_id = #{roomId} and u.online_state = 1
    order by m.create_time desc

  </select>
  <select id="getRoomManagerByRoomId" resultType="java.lang.String" parameterType="java.lang.Long">
    select
    g.user_id
    from t_funtime_chatroom_manager g inner join
    t_funtime_chatroom_mic m  on m.mic_user_id = g.user_id and m.room_id = g.room_id
    where g.room_id = #{roomId}

  </select>
  <select id="getMicUserIdByRoomId"  resultType="java.lang.Long" >
    select
    mic_user_id
    from t_funtime_chatroom_mic
    where room_id = #{roomId} and mic_user_id !=#{userId} and mic_user_id is not null and mic_location>0
  </select>
  <select id="getMicInfoByRoomId"  resultType="java.util.Map" >
    select
    m.mic_location as micLocation,m.mic_user_id as micUserId
    from t_funtime_chatroom_mic m inner join t_funtime_user u on m.mic_user_id = u.id
    where m.room_id = #{roomId} and u.online_state = 1 and m.mic_location>0
  </select>
  <select id="getRoomUserByRoomId"  resultType="java.lang.Long" >
    select
    mic_user_id
    from t_funtime_chatroom_mic
    where room_id = #{roomId} and mic_user_id !=#{userId} and mic_user_id is not null
  </select>
    <select id="getMicUserByRoomId" parameterType="java.lang.Long" resultType="java.util.Map">
        select
        m.mic_location micLocation,if(u.online_state = 1,m.mic_user_id,null) micUserId,m.user_role userRole,m.state,m.music_auth musicAuth,u.nickname
        ,u.portrait_address portraitAddress,u.sex,u.show_id showId
        ,t.level,ifnull(g.blue_amount,0) blueAmount
        ,case when h.user_id is null then null
          when h.type = 1 then l.level_url
          when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
          else null end levelUrl
        from t_funtime_chatroom_mic m left join (t_funtime_user u
        inner join t_funtime_user_account t on u.id = t.user_id and u.online_state = 1
        inner join t_funtime_user_level_conf l on t.level = l.level) on m.mic_user_id = u.id
        left join t_funtime_user_headwear_current h on u.id = h.user_id
        left join t_funtime_room_game123_val g on m.mic_user_id = g.user_id
        where m.room_id = #{roomId} and m.mic_location>0
        order by m.mic_location asc
    </select>
  <select id="getRoomUserByIdAll"  resultType="java.util.Map">
    select
    u.id id,u.nickname,u.portrait_address portraitAddress
    ,u.sign_text signText,u.sex,u.show_id showId,m.user_role userRole
    ,u.online_state as onlineState
    ,l.level
    ,case when h.user_id is null then null
    when h.type = 1 then l.level_url
    when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
    else null end levelUrl
    from t_funtime_chatroom_mic m inner join t_funtime_user u on m.mic_user_id = u.id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id
    left join t_funtime_user_headwear_current h on u.id = h.user_id
    where m.room_id = #{roomId} and u.online_state = 1
    <if test="nickname!=null and nickname!=''">
      and BINARY u.nickname like concat('%',#{nickname},'%')
    </if>
    order by m.user_role asc, m.create_time desc
  </select>
  <select id="getRoomUserByIdAll2"  resultType="java.util.Map">
    select
    u.id id,u.nickname,u.portrait_address portraitAddress
    ,u.sign_text signText,u.sex,u.show_id showId,m.user_role userRole
    ,u.online_state as onlineState
    ,l.level
    ,case when h.user_id is null then null
          when h.type = 1 then l.level_url
          when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
          else null end levelUrl,
    case when h.user_id is null then null
          when h.type = 1 then l.level_url
          when h.type = 2 then (select w.headwear_url_h5 from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
          else null end levelUrlGif
    from t_funtime_chatroom_mic m inner join t_funtime_user u on m.mic_user_id = u.id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id
    left join t_funtime_user_headwear_current h on u.id = h.user_id
    where m.room_id = #{roomId} and u.online_state = 1 and u.id!=#{userId}
    and u.id not in (select cr.user_id from t_funtime_chatroom_manager cr where cr.room_id = #{roomId})

    order by m.user_role asc, m.create_time desc
  </select>
  <select id="getRoomUserById"  resultType="java.util.Map">
    select
    u.id id,u.nickname,u.portrait_address portraitAddress,u.sign_text signText,u.sex,u.show_id showId
    ,l.level
    ,case when h.user_id is null then null
    when h.type = 1 then l.level_url
    when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
    else null end levelUrl
    from t_funtime_chatroom_mic m inner join t_funtime_user u on m.mic_user_id = u.id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id
    left join t_funtime_user_headwear_current h on u.id = h.user_id
    where m.room_id = #{roomId} and u.id!=#{userId} and m.user_role = 4
    <if test="nickname!=null and nickname!=''">
      and BINARY u.nickname like concat('%',#{nickname},'%')
    </if>
    order by m.create_time desc
  </select>
  <update id="updateMicByRoomId" parameterType="java.lang.Long">
    update t_funtime_chatroom_mic set mic_user_id = null,state = 1,update_time = NOW()
    where room_id = #{roomId} and mic_location>0
  </update>
  <update id="deleteByRoomId" parameterType="java.lang.Long">
    delete from t_funtime_chatroom_mic
    where room_id = #{roomId} and mic_location is null
  </update>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_funtime_chatroom_mic
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <update id="lowerWheat" >
    update t_funtime_chatroom_mic set mic_user_id = null,update_time = NOW()
    where id = #{id}
  </update>

  <update id="upperWheat" >
    update t_funtime_chatroom_mic set mic_user_id = #{userId},update_time = NOW()
    where id = #{id}
  </update>
  <update id="stopWheat" >
    update t_funtime_chatroom_mic set mic_user_id = null,state = 2,update_time = NOW()
    where id = #{id}
  </update>
  <update id="openWheat" >
    update t_funtime_chatroom_mic set state = 1,update_time = NOW()
    where id = #{id}
  </update>
  <update id="forbidWheat" >
    update t_funtime_chatroom_mic set state = 3,update_time = NOW()
    where id = #{id}
  </update>
  <update id="releaseWheat" >
    update t_funtime_chatroom_mic set state = 1,update_time = NOW()
    where id = #{id}
  </update>
  <update id="roomManage" >
    update t_funtime_chatroom_mic set user_role = 2,update_time = NOW()
    where id = #{id}
  </update>
  <update id="roomManageCancel" >
    update t_funtime_chatroom_mic set user_role = 3,update_time = NOW()
    where id = #{id}
  </update>

  <update id="startMusicAuth" >
    update t_funtime_chatroom_mic set music_auth = 1,update_time = NOW()
    where id = #{id}
  </update>
  <update id="cancelMusicAuth" >
    update t_funtime_chatroom_mic set music_auth = 2,update_time = NOW()
    where id = #{id}
  </update>
  <insert id="insertBatch" >
    insert into t_funtime_chatroom_mic (room_id, mic_location,
      mic_user_id, create_time,user_role
      )
    values
    <foreach collection="mics" item="mic" separator=",">
    (#{mic.roomId}, #{mic.micLocation},
      #{mic.micUserId}, NOW(),#{mic.userRole}
      )
    </foreach>
  </insert>

  <insert id="insertSelective" parameterType="com.rzyou.funtime.entity.FuntimeChatroomMic">
    insert into t_funtime_chatroom_mic
    <trim prefix="(" suffix=")" suffixOverrides=",">

      <if test="roomId != null">
        room_id,
      </if>
      <if test="micLocation != null">
        mic_location,
      </if>
      <if test="micUserId != null">
        mic_user_id,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="userRole != null">
        user_role,
      </if>

    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">

      <if test="roomId != null">
        #{roomId,jdbcType=BIGINT},
      </if>
      <if test="micLocation != null">
        #{micLocation,jdbcType=INTEGER},
      </if>
      <if test="micUserId != null">
        #{micUserId,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state},
      </if>
      <if test="userRole != null">
        #{userRole},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.rzyou.funtime.entity.FuntimeChatroomMic">
    update t_funtime_chatroom_mic
    <set>
      <if test="roomId != null">
        room_id = #{roomId,jdbcType=BIGINT},
      </if>
      <if test="micLocation != null">
        mic_location = #{micLocation,jdbcType=INTEGER},
      </if>
      <if test="micUserId != null">
        mic_user_id = #{micUserId,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        state = #{state},
      </if>
      <if test="userRole != null">
       user_role =  #{userRole},
      </if>

      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rzyou.funtime.entity.FuntimeChatroomMic">
    update t_funtime_chatroom_mic
    set room_id = #{roomId,jdbcType=BIGINT},
      mic_location = #{micLocation,jdbcType=INTEGER},
      mic_user_id = #{micUserId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>