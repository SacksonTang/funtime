<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rzyou.funtime.mapper.FuntimeChatroomMapper">
  <resultMap id="BaseResultMap" type="com.rzyou.funtime.entity.FuntimeChatroom">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="exam_url" jdbcType="VARCHAR" property="examUrl" />
    <result column="avatar_url" jdbcType="VARCHAR" property="avatarUrl" />
    <result column="tags"  property="tags" />
    <result column="exam_desc" jdbcType="VARCHAR" property="examDesc" />
    <result column="is_block" jdbcType="INTEGER" property="isBlock" />
    <result column="is_lock" jdbcType="INTEGER" property="isLock" />
    <result column="hot" jdbcType="INTEGER" property="hot" />
    <result column="hots" jdbcType="INTEGER" property="hots" />
    <result column="online_num" jdbcType="INTEGER" property="onlineNum" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="chat_message_file" jdbcType="VARCHAR" property="chatMessageFile" />
    <result column="portrait_address"  property="portraitAddress" />
    <result column="nickname"  property="nickname" />
    <result column="sex"  property="sex" />
    <result column="show_id"  property="showId" />
    <result column="level"  property="level" />
    <result column="level_url"  property="levelUrl" />
    <result column="background_id"  property="backgroundId" />
    <result column="background_url"  property="bgUrl" />
    <result column="background_url2"  property="bgUrl2" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, tags, exam_desc, is_block, is_lock, hot, online_num, state, create_time,
    chat_message_file,user_id,password,exam_url,avatar_url,background_id,hots
  </sql>
  <select id="getAllRoom" resultType="java.lang.Long" >
    select
    m.id
    from t_funtime_chatroom m inner join t_funtime_chatroom_mic c on m.id = c.room_id
		inner join t_funtime_user u on c.mic_user_id = u.id
		where   m.state = 1 and m.is_block = 2 and u.online_state = 1
     group by m.id

  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_funtime_chatroom
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="checkRoomExists" parameterType="java.lang.Long" resultType="java.lang.Long">
    select
    id
    from t_funtime_chatroom
    where id = #{id}
  </select>
  <select id="getRoomCloseTask"  resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_funtime_chatroom
    where online_num = 0 and is_block = 2 and state = 1
  </select>
  <select id="getRoomInfoById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
     m.id, m.name, m.tags, m.exam_desc, m.is_block, m.is_lock, m.hot, m.state, m.create_time,
     m.chat_message_file,m.user_id,m.password,m.exam_url,m.avatar_url,m.background_id
     ,u.portrait_address,u.nickname,u.sex,u.show_id,l.level
     ,case when h.user_id is null then null
          when h.type = 1 then l.level_url
          when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
          else null end level_url
     ,k.background_url,k.background_url2,
     (select count(u1.id) from t_funtime_chatroom_mic cu inner join t_funtime_user u1 on cu.mic_user_id = u1.id where  u1.online_state = 1 and m.id = cu.room_id) online_num
    from t_funtime_chatroom m inner join
        (t_funtime_user u
        inner join t_funtime_user_account t on u.id = t.user_id
        inner join t_funtime_user_level_conf l on t.level = l.level)
    on m.user_id = u.id
    left join t_funtime_user_headwear_current h on u.id = h.user_id
    left join t_funtime_background k on m.background_id = k.id
    where m.id = #{id,jdbcType=BIGINT}
  </select>
  <select id="getRoomByUserId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_funtime_chatroom
    where user_id = #{userId,jdbcType=BIGINT} limit 1
  </select>
  <select id="getRoomList" parameterType="java.lang.Integer" resultType="java.util.Map">
    select
    m.id, m.name, m.tags, m.exam_desc examDesc, m.is_lock isLock,
    u.sex,u.show_id showId,
    m.user_id userId,u.nickname,m.exam_url examUrl,m.avatar_url avatarUrl,
    case when 1000>m.hots then m.hots
    when m.hots>=1000 and 10000>m.hots then CONCAT(FORMAT(m.hots/1000,2),'k')
    when m.hots>=10000 then CONCAT(FORMAT(m.hots/10000,2),'w')
    else 0 end hots,
    g.tag_name  tagNames,
    g.tag_color tagColor,
    g.tag_url tagUrl,

    (select count(u1.id) from t_funtime_chatroom_mic cu inner join t_funtime_user u1 on cu.mic_user_id = u1.id where u1.sex = 1 and u1.online_state = 1 and m.id = cu.room_id) maleCount,
    (select count(u2.id) from t_funtime_chatroom_mic cu inner join t_funtime_user u2 on cu.mic_user_id = u2.id where u2.sex = 2 and u2.online_state = 1 and m.id = cu.room_id) femaleCount,
    (select count(u1.id) from t_funtime_chatroom_mic cu inner join t_funtime_user u1 on cu.mic_user_id = u1.id where u1.sex = 1 and u1.online_state = 1 and m.id = cu.room_id)
    +
    (select count(u2.id) from t_funtime_chatroom_mic cu inner join t_funtime_user u2 on cu.mic_user_id = u2.id where u2.sex = 2 and u2.online_state = 1 and m.id = cu.room_id)
    onlineNum
    from t_funtime_chatroom m
    inner join t_funtime_user u on m.user_id = u.id

    left join t_funtime_tag g on g.id = m.tags
    where m.is_block = 2 and m.state = 1

       <if test="tagId!=null and tagId!='' and tagId!=0">
          <if test="tagId == -1">
            and m.hot > 0
          </if>
         <if test="tagId != -1">
           and FIND_IN_SET(#{tagId},tags)>0
         </if>
      </if>
     group by m.id
     order by m.hot desc,onlineNum desc ,m.id desc
  </select>
  <select id="getRoomList2" parameterType="java.lang.Integer" resultType="java.util.Map">
    select
    m.id, m.name, m.tags, m.exam_desc examDesc, m.is_lock isLock,
    u.sex,u.show_id showId,
    m.user_id userId,u.nickname,m.exam_url examUrl,m.avatar_url avatarUrl,
    case when 1000>m.hots then m.hots
    when m.hots>=1000 and 1000000>m.hots then CONCAT(FORMAT(m.hots/1000,0),'K')
    when m.hots>=1000000 and 1000000000>m.hots then CONCAT(FORMAT(m.hots/1000000,0),'M')
    when m.hots>=1000000000  then CONCAT(FORMAT(m.hots/1000000000,0),'B')
    else 0 end hots,
    g.tag_name  tagNames,
    g.tag_color tagColor,
    g.tag_url tagUrl
    from t_funtime_chatroom m
    inner join t_funtime_user u on m.user_id = u.id

    left join t_funtime_tag g on g.id = m.tags
    where m.is_block = 2 and m.state = 1

    <if test="tagId!=null and tagId!='' and tagId!=0">
      <if test="tagId == -1">
        and m.hot > 0
      </if>
      <if test="tagId != -1">
        and FIND_IN_SET(#{tagId},tags)>0
      </if>
    </if>
    group by m.id
    order by m.hot desc,m.hots desc ,m.id desc
  </select>

  <select id="getRoomLogList" parameterType="java.lang.Long" resultType="java.util.Map">
    select
    m.id, m.name, m.tags, m.exam_desc examDesc, m.is_lock isLock,
    m.online_num onlineNum,u.sex,u.show_id showId,
    m.user_id userId,u.nickname,m.exam_url examUrl,m.avatar_url avatarUrl,
    case when 1000>m.hots then m.hots
    when m.hots>=1000 and 10000>m.hots then CONCAT(FORMAT(m.hots/1000,2),'千')
    when m.hots>=10000 then CONCAT(FORMAT(m.hots/10000,2),'万')
    else 0 end hots,
    g.tag_name tagNames,
    g.tag_color tagColor,
    g.tag_url tagUrl
    from t_funtime_chatroom m
    inner join t_funtime_user_visit_log l on m.id = l.room_id
    inner join t_funtime_user u on m.user_id = u.id
    left join t_funtime_tag g on g.id = m.tags
    where m.is_block = 2 and m.state = 1
     and l.user_id = #{userId}
    group by m.id
    order by m.online_num desc ,m.id desc
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_funtime_chatroom
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <update id="deleteByRoomId" parameterType="java.lang.Long">
    update t_funtime_chatroom set state = 2,online_num =0,is_lock = 2,password = null
    where id = #{id}
  </update>
  <insert id="insertUserRoomLog" parameterType="java.util.Map" >
    insert into t_funtime_user_visit_log (type,user_id, room_id,to_user_id
    )
    values

      (#{type},#{userId}, #{roomId},#{toUserId}
      )

  </insert>
  <insert id="insertSelective" parameterType="com.rzyou.funtime.entity.FuntimeChatroom" useGeneratedKeys="true" keyProperty="id">
    insert into t_funtime_chatroom
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>

      <if test="name != null">
        name,
      </if>
      <if test="examUrl != null">
        exam_url,
      </if>
      <if test="avatarUrl != null">
        avatar_url,
      </if>

      <if test="password != null">
        password,
      </if>
      <if test="tags != null">
        tags,
      </if>
      <if test="examDesc != null">
        exam_desc,
      </if>
      <if test="isBlock != null">
        is_block,
      </if>
      <if test="isLock != null">
        is_lock,
      </if>
      <if test="hot != null">
        hot,
      </if>
      <if test="hots != null">
        hots,
      </if>
      <if test="onlineNum != null">
        online_num,
      </if>
      <if test="state != null">
        state,
      </if>

      <if test="chatMessageFile != null">
        chat_message_file,
      </if>
      <if test="backgroundId != null">
        background_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId},
      </if>

      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="examUrl != null">
        #{examUrl},
      </if>
      <if test="avatarUrl != null">
        #{avatarUrl},
      </if>
      <if test="password != null">
        #{password},
      </if>
      <if test="tags != null">
        #{tags},
      </if>
      <if test="examDesc != null">
        #{examDesc,jdbcType=VARCHAR},
      </if>
      <if test="isBlock != null">
        #{isBlock,jdbcType=INTEGER},
      </if>
      <if test="isLock != null">
        #{isLock,jdbcType=INTEGER},
      </if>
      <if test="hot != null">
        #{hot,jdbcType=INTEGER},
      </if>
      <if test="hots != null">
        #{hots,jdbcType=INTEGER},
      </if>
      <if test="onlineNum != null">
        #{onlineNum,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>

      <if test="chatMessageFile != null">
        #{chatMessageFile,jdbcType=VARCHAR},
      </if>
      <if test="backgroundId != null">
        #{backgroundId},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.rzyou.funtime.entity.FuntimeChatroom">
    update t_funtime_chatroom
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null and password!=''">
        password = #{password},
      </if>
      <if test="password=='' or password==null">
        password = null,
      </if>
      <if test="examUrl != null">
        exam_url = #{examUrl},
      </if>
      <if test="avatarUrl != null">
        avatar_url = #{avatarUrl},
      </if>
      <if test="tags != null">
        tags = #{tags},
      </if>
      <if test="examDesc != null">
        exam_desc = #{examDesc,jdbcType=VARCHAR},
      </if>
      <if test="isBlock != null">
        is_block = #{isBlock,jdbcType=INTEGER},
      </if>
      <if test="isLock != null">
        is_lock = #{isLock,jdbcType=INTEGER},
      </if>
      <if test="hot != null">
        hot = #{hot,jdbcType=INTEGER},
      </if>
      <if test="onlineNum != null">
        online_num = #{onlineNum,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="chatMessageFile != null">
        chat_message_file = #{chatMessageFile,jdbcType=VARCHAR},
      </if>
      <if test="backgroundId != null">
        background_id = #{backgroundId},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateChatroomState" >
    update t_funtime_chatroom
    set
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateChatroomBlock" >
    update t_funtime_chatroom
    set
      is_block = #{isBlock,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateChatroomBackgroundId" >
    update t_funtime_chatroom
    set
      background_id = #{backgroundId}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateOnlineNumPlus" >
    update t_funtime_chatroom
    set online_num = online_num+1,hots = hots+#{hots}
    where id = #{id}
  </update>
  <update id="updateOnlineNumSub" >
    update t_funtime_chatroom
    set online_num = online_num-1,hots = hots-#{hots}
    where id = #{id}
  </update>
  <update id="updateHotsPlus" >
    update t_funtime_chatroom
    set hots = hots+#{hots}
    where id = #{id}
  </update>
  <update id="updateHotsSub" >
    update t_funtime_chatroom
    set hots = hots-#{hots}
    where id = #{id} and hots>=#{hots}
  </update>
    <update id="resetRoomHotsTask" >
    update t_funtime_chatroom a set a.hots = (
         select ifnull(sum(if(b.user_role = 1,5,if(u.sex = 2,3,2))),0)
         from t_funtime_chatroom_mic b inner join t_funtime_user u on b.mic_user_id = u.id
         where u.online_state = 1 and b.room_id = a.id
        )
  </update>
  <update id="updateOnlineNumTask">
    update  t_funtime_chatroom m
    inner join (select room_id,count(id) counts from t_funtime_chatroom_mic where mic_user_id is not null GROUP BY room_id) u on m.id = u.room_id
    set m.online_num = u.counts
    where  m.online_num!= u.counts
  </update>
</mapper>