<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rzyou.funtime.mapper.FuntimeDynamicMapper">

    <select id="getNoticeCounts" resultType="java.lang.Integer">
        select counts from t_funtime_dynotice_count where user_id = #{userId}
    </select>

    <insert id="insertDyCounts">
        insert into t_funtime_dynotice_count (user_id,counts) values (#{userId},1)
    </insert>

    <update id="updateDyCounts">
        update t_funtime_dynotice_count set counts = counts+1 where user_id = #{userId}
    </update>

    <delete id="delDyCounts">
        delete from t_funtime_dynotice_count where user_id = #{userId}
    </delete>

    <insert id="insertDynamic" parameterType="com.rzyou.funtime.entity.FuntimeDynamic">
        insert into t_funtime_dynamic (user_id,dynamic,resource_type,resource1,resource2,cover_url,
                 resource3,resource4,resource5,resource6,resource7,resource8,resource9)
        values (#{userId},#{dynamic},#{resourceType},#{resource1},#{resource2},#{coverUrl}
            ,#{resource3},#{resource4},#{resource5},#{resource6},#{resource7},#{resource8},#{resource9})
    </insert>

    <delete id="delDynamic">
        delete from t_funtime_dynamic where id = #{id}
    </delete>
    <insert id="insertComment" parameterType="com.rzyou.funtime.entity.FuntimeComment" keyProperty="id" useGeneratedKeys="true">

        insert into t_funtime_comment (user_id, dynamic_id,
        comment, to_user_id, to_comment_id)
        values (#{userId,jdbcType=BIGINT}, #{dynamicId,jdbcType=BIGINT},
        #{comment,jdbcType=VARCHAR}, #{toUserId,jdbcType=BIGINT}, #{toCommentId,jdbcType=BIGINT})
    </insert>
    <delete id="delCommentById">
        delete from t_funtime_comment where id = #{id}
    </delete>
    <delete id="delCommentByDynamicId">
        delete from t_funtime_comment where id = #{dynamicId}
    </delete>
    <insert id="insertDynamicLike">
        insert into t_funtime_dynamic_like (user_id,dynamic_id) values (#{userId},#{dynamicId})
    </insert>

    <delete id="delDynamicLike">
        delete from t_funtime_dynamic_like where user_id = #{userId} and dynamic_id = #{dynamicId}
    </delete>
    <select id="checkDynamicLike" resultType="java.lang.Integer">
        select 1 from t_funtime_dynamic_like where user_id = #{userId} and dynamic_id = #{dynamicId}
    </select>

    <select id="getDynamicNoticeList" resultType="java.util.Map">
        select s.dynamicId,s.resource1,s.coverUrl,s.dynamic,s.id,s.userId,s.comment,s.toNickname,
        case when TIMESTAMPDIFF(minute,s.createTime,now()) <![CDATA[<]]> 1 then '刚刚'
        when TIMESTAMPDIFF(minute,s.createTime,now()) >= 1 and TIMESTAMPDIFF(minute,s.createTime,now()) <![CDATA[<]]> 60 then CONCAT(TIMESTAMPDIFF(minute,s.createTime,now()),'分钟前')
        when TIMESTAMPDIFF(hour,s.createTime,now())>=1 and TIMESTAMPDIFF(hour,s.createTime,now()) <![CDATA[<]]> 24 then CONCAT(TIMESTAMPDIFF(hour,s.createTime,now()),'小时前')
        else  DATE_FORMAT(s.createTime,'%Y-%m-%d') end createTime,
        s.type ,unix_timestamp(s.createTime) as lastId,
        u.nickname,u.portrait_address as  portraitAddress,u.sex,
        case when h.user_id is null then null
                    when h.type = 1 then f.level_url
                    when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
                    else null end levelUrl
        from  (
        select d.id as dynamicId,  d.resource1,d.cover_url as coverUrl,d.dynamic ,t.id,t.user_id as userId,t.`comment`,u.nickname as toNickname, t.create_time as createTime,'1' as type
        from t_funtime_dynamic d inner join t_funtime_comment t on d.id = t.dynamic_id
        left join t_funtime_user u on t.to_user_id = u.id
        where d.user_id = #{userId} or t.to_user_id = #{userId}
        <if test="lastId!=null">
            and t.create_time <![CDATA[<]]> FROM_UNIXTIME(#{lastId})
        </if>
        union all
        select d.id as dynamicId,d.resource1,d.cover_url as coverUrl,d.dynamic,l.id,l.user_id as userId ,null as `comment`,null as toNickname, l.create_time as createTime,'2' as type
        from t_funtime_dynamic d inner join t_funtime_dynamic_like l on d.id = l.dynamic_id
        where d.user_id = #{userId}
        <if test="lastId!=null">
            and l.create_time <![CDATA[<]]> FROM_UNIXTIME(#{lastId})
        </if>
        order by createTime desc
        limit ${counts}
        ) s
        inner join t_funtime_user u on s.userId = u.id
        inner join (t_funtime_user_account a
        inner join t_funtime_user_level_conf f on a.level = f.level) on u.id = a.user_id
        left join t_funtime_user_headwear_current h on u.id = h.user_id
    </select>

    <select id="getDynamicNotice" resultType="java.util.Map">
        select
        u.portrait_address as  portraitAddress,u.sex
        from  (
        select t.user_id as userId, unix_timestamp(t.create_time) as createTime
        from t_funtime_dynamic d inner join t_funtime_comment t on d.id = t.dynamic_id
        left join t_funtime_user u on t.to_user_id = u.id
        where d.user_id = #{userId}
        union all
        select l.user_id as userId , unix_timestamp(l.create_time) as createTime
        from t_funtime_dynamic d inner join t_funtime_dynamic_like l on d.id = l.dynamic_id
        where d.user_id = #{userId} limit 1
        ) s
        inner join t_funtime_user u on s.userId = u.id
        order by s.createTime desc
        limit 1

    </select>

    <select id="getDynamicDetailById" resultType="java.util.Map">
        select d.id,d.user_id as userId,dynamic,d.resource_type as resourceType,d.resource1,d.resource2,
        d.resource3,d.resource4,d.resource5,d.resource6,d.resource7,d.resource8,d.resource9,cover_url as coverUrl,
        case when TIMESTAMPDIFF(minute,d.create_time,now()) <![CDATA[<]]> 1 then '刚刚'
        when TIMESTAMPDIFF(minute,d.create_time,now()) >= 1 and TIMESTAMPDIFF(minute,d.create_time,now()) <![CDATA[<]]> 60 then CONCAT(TIMESTAMPDIFF(minute,d.create_time,now()),'分钟前')
        when TIMESTAMPDIFF(hour,d.create_time,now())>=1 and TIMESTAMPDIFF(hour,d.create_time,now()) <![CDATA[<]]> 24 then CONCAT(TIMESTAMPDIFF(hour,d.create_time,now()),'小时前')
        else  DATE_FORMAT(d.create_time,'%Y-%m-%d') end createTime,
        u.nickname,u.portrait_address as portraitAddress,u.sex,c.room_id as roomId,
        IF(k.dynamic_id is null,0,1) likeState,
        if(e.user_id is null,0,1) concernState,
        count(distinct t.id) as commentCounts, count(distinct l.user_id) as likeCounts
        ,
        case when h.user_id is null then null
        when h.type = 1 then f.level_url
        when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
        else null end levelUrl

        from t_funtime_dynamic d inner join t_funtime_user u on d.user_id = u.id
        inner join (t_funtime_user_account a
        inner join t_funtime_user_level_conf f on a.level = f.level) on d.user_id = a.user_id
        left join t_funtime_user_headwear_current h on u.id = h.user_id
        left join t_funtime_comment t on d.id = t.dynamic_id
        left join t_funtime_dynamic_like l on d.id = l.dynamic_id
        left join t_funtime_chatroom_mic c on d.user_id = c.mic_user_id and u.online_state = 1
        left join t_funtime_dynamic_like k on k.dynamic_id = d.id and k.user_id = #{userId}
        left join t_funtime_user_concern e on e.to_user_id = d.user_id and e.user_id = #{userId}
        where d.id = #{dynamicId}
        group by d.id,c.room_id,a.level
    </select>

    <select id="getDynamicList" resultType="java.util.Map">
        select d.id,d.user_id as userId,dynamic,d.resource_type as resourceType,d.resource1,d.resource2,
                 d.resource3,d.resource4,d.resource5,d.resource6,d.resource7,d.resource8,d.resource9,cover_url as coverUrl,
                case when TIMESTAMPDIFF(minute,d.create_time,now()) <![CDATA[<]]> 1 then '刚刚'
                when TIMESTAMPDIFF(minute,d.create_time,now()) >= 1 and TIMESTAMPDIFF(minute,d.create_time,now()) <![CDATA[<]]> 60 then CONCAT(TIMESTAMPDIFF(minute,d.create_time,now()),'分钟前')
                when TIMESTAMPDIFF(hour,d.create_time,now())>=1 and TIMESTAMPDIFF(hour,d.create_time,now()) <![CDATA[<]]> 24 then CONCAT(TIMESTAMPDIFF(hour,d.create_time,now()),'小时前')
                else  DATE_FORMAT(d.create_time,'%Y-%m-%d') end createTime,
                 u.nickname,u.portrait_address as portraitAddress,u.sex,c.room_id as roomId,
                 IF(k.dynamic_id is null,0,1) likeState,
                 if(e.user_id is null,0,1) concernState,
                 count(distinct t.id) as commentCounts, count( distinct l.user_id) as likeCounts
                ,
                case when h.user_id is null then null
                when h.type = 1 then f.level_url
                when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
                else null end levelUrl

        from t_funtime_dynamic d inner join t_funtime_user u on d.user_id = u.id
            inner join (t_funtime_user_account a
            inner join t_funtime_user_level_conf f on a.level = f.level) on d.user_id = a.user_id
            left join t_funtime_user_headwear_current h on u.id = h.user_id
             left join t_funtime_comment t on d.id = t.dynamic_id
             left join t_funtime_dynamic_like l on d.id = l.dynamic_id
             left join t_funtime_chatroom_mic c on d.user_id = c.mic_user_id and u.online_state = 1
             left join t_funtime_dynamic_like k on k.dynamic_id = d.id and k.user_id = #{userId}
             left join t_funtime_user_concern e on e.to_user_id = d.user_id and e.user_id = #{userId}
        where 1=1
         <if test="lastId!=null">
             and d.id <![CDATA[<]]> #{lastId}
         </if>
        group by d.id,c.room_id,a.level
        order by d.id desc
        limit ${counts}
    </select>
    <select id="getOtherDynamicList" resultType="java.util.Map">
        select d.id,d.user_id as userId,dynamic,d.resource_type as resourceType,d.resource1,d.resource2,
                d.resource3,d.resource4,d.resource5,d.resource6,d.resource7,d.resource8,d.resource9,cover_url as coverUrl,
                case when TIMESTAMPDIFF(minute,d.create_time,now()) <![CDATA[<]]> 1 then '刚刚'
                when TIMESTAMPDIFF(minute,d.create_time,now()) >= 1 and TIMESTAMPDIFF(minute,d.create_time,now()) <![CDATA[<]]> 60 then CONCAT(TIMESTAMPDIFF(minute,d.create_time,now()),'分钟前')
                when TIMESTAMPDIFF(hour,d.create_time,now())>=1 and TIMESTAMPDIFF(hour,d.create_time,now()) <![CDATA[<]]> 24 then CONCAT(TIMESTAMPDIFF(hour,d.create_time,now()),'小时前')
                else  DATE_FORMAT(d.create_time,'%Y-%m-%d') end createTime,
                u.nickname,u.portrait_address as portraitAddress,u.sex,c.room_id as roomId,
                IF(k.dynamic_id is null,0,1) likeState,

                count(distinct t.id) as commentCounts, count(distinct l.user_id) as likeCounts
                ,
                case when h.user_id is null then null
                when h.type = 1 then f.level_url
                when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
                else null end levelUrl

        from t_funtime_dynamic d inner join t_funtime_user u on d.user_id = u.id
        inner join (t_funtime_user_account a
        inner join t_funtime_user_level_conf f on a.level = f.level) on d.user_id = a.user_id
        left join t_funtime_user_headwear_current h on u.id = h.user_id
        left join t_funtime_comment t on d.id = t.dynamic_id
        left join t_funtime_dynamic_like l on d.id = l.dynamic_id
        left join t_funtime_chatroom_mic c on d.user_id = c.mic_user_id
        left join t_funtime_dynamic_like k on k.dynamic_id = d.id and k.user_id = #{userId}

        where d.user_id = #{toUserId}
        <if test="lastId!=null">
            and d.id <![CDATA[<]]> #{lastId}
        </if>
        group by d.id,c.room_id,a.level
        order by d.id desc
        limit ${counts}
    </select>
    <select id="getMyDynamicList" resultType="java.util.Map">
        select d.id,d.user_id as userId,dynamic,d.resource_type as resourceType,d.resource1,d.resource2,
                d.resource3,d.resource4,d.resource5,d.resource6,d.resource7,d.resource8,d.resource9,cover_url as coverUrl,
                case when TIMESTAMPDIFF(minute,d.create_time,now()) <![CDATA[<]]> 1 then '刚刚'
                when TIMESTAMPDIFF(minute,d.create_time,now()) >= 1 and TIMESTAMPDIFF(minute,d.create_time,now()) <![CDATA[<]]> 60 then CONCAT(TIMESTAMPDIFF(minute,d.create_time,now()),'分钟前')
                when TIMESTAMPDIFF(hour,d.create_time,now())>=1 and TIMESTAMPDIFF(hour,d.create_time,now()) <![CDATA[<]]> 24 then CONCAT(TIMESTAMPDIFF(hour,d.create_time,now()),'小时前')
                else  DATE_FORMAT(d.create_time,'%Y-%m-%d') end createTime,
                u.nickname,u.portrait_address as portraitAddress,u.sex,

                count(distinct t.id) as commentCounts, count(distinct l.user_id) as likeCounts
                ,
                case when h.user_id is null then null
                when h.type = 1 then f.level_url
                when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
                else null end levelUrl
        from t_funtime_dynamic d inner join t_funtime_user u on d.user_id = u.id
        inner join (t_funtime_user_account a
        inner join t_funtime_user_level_conf f on a.level = f.level) on d.user_id = a.user_id
        left join t_funtime_user_headwear_current h on u.id = h.user_id
        left join t_funtime_comment t on d.id = t.dynamic_id
        left join t_funtime_dynamic_like l on d.id = l.dynamic_id
        left join t_funtime_dynamic_like k on k.dynamic_id = d.id and k.user_id = #{userId}
        where d.user_id = #{userId}
        <if test="lastId!=null">
            and d.id <![CDATA[<]]> #{lastId}
        </if>
        group by d.id
        order by d.id desc
        limit ${counts}
    </select>
    <select id="getCommentList" resultType="java.util.Map">
        select t.id,t.user_id as userId,t.comment,t.to_user_id as toUserId,
               u.nickname,u.portrait_address as portraitAddress,u.sex,
               u1.nickname as toNickname,
                case when TIMESTAMPDIFF(minute,t.create_time,now()) <![CDATA[<]]> 1 then '刚刚'
                when TIMESTAMPDIFF(minute,t.create_time,now()) >= 1 and TIMESTAMPDIFF(minute,t.create_time,now()) <![CDATA[<]]> 60 then CONCAT(TIMESTAMPDIFF(minute,t.create_time,now()),'分钟前')
                when TIMESTAMPDIFF(hour,t.create_time,now())>=1 and TIMESTAMPDIFF(hour,t.create_time,now()) <![CDATA[<]]> 24 then CONCAT(TIMESTAMPDIFF(hour,t.create_time,now()),'小时前')
                else  DATE_FORMAT(t.create_time,'%Y-%m-%d') end createTime,
                case when h.user_id is null then null
                when h.type = 1 then f.level_url
                when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
                else null end levelUrl
        from t_funtime_comment t inner join t_funtime_user u on t.user_id = u.id
            inner join (t_funtime_user_account a
            inner join t_funtime_user_level_conf f on a.level = f.level) on t.user_id = a.user_id
            left join t_funtime_user_headwear_current h on u.id = h.user_id
             left join t_funtime_user u1 on t.to_user_id = u1.id
        where t.dynamic_id = #{dynamicId}
        <if test="lastId!=null">
            and t.id <![CDATA[<]]> #{lastId}
        </if>
        order by t.id desc
        limit ${counts}
    </select>
    <select id="getLikeList" resultType="java.util.Map">
        select t.id,t.user_id as userId,
            u.portrait_address as portraitAddress,u.sex,
            case when h.user_id is null then null
            when h.type = 1 then f.level_url
            when h.type = 2 then (select w.headwear_url from t_funtime_headwear w where w.headwear_number = h.headwear_id limit 1)
            else null end levelUrl
        from t_funtime_dynamic_like t inner join t_funtime_user u on t.user_id = u.id
        inner join (t_funtime_user_account a
        inner join t_funtime_user_level_conf f on a.level = f.level) on t.user_id = a.user_id
        left join t_funtime_user_headwear_current h on u.id = h.user_id
        where t.dynamic_id = #{dynamicId}
        <if test="lastId!=null">
            and t.id <![CDATA[<]]> #{lastId}
        </if>
        order by t.id desc
        limit ${counts}
    </select>

    <select id="getDynamicById" resultType="java.lang.Long">
        select user_id from t_funtime_dynamic where id = #{id}
    </select>
    <select id="getCommentById" resultType="java.lang.Long">
        select user_id from t_funtime_comment where id = #{id}
    </select>
</mapper>