<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rzyou.funtime.mapper.FuntimeUserMapper">
  <resultMap id="BaseResultMap" type="com.rzyou.funtime.entity.FuntimeUser">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="fullname" jdbcType="VARCHAR" property="fullname" />
    <result column="nickname" jdbcType="VARCHAR" property="nickname" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="phone_number" jdbcType="VARCHAR" property="phoneNumber" />
    <result column="phone_imei" jdbcType="VARCHAR" property="phoneImei" />
    <result column="drainage_channel_id" jdbcType="INTEGER" property="drainageChannelId" />
    <result column="portrait_address" jdbcType="VARCHAR" property="portraitAddress" />
    <result column="sex" jdbcType="INTEGER" property="sex" />
    <result column="birthday" jdbcType="INTEGER" property="birthday" />
    <result column="height" jdbcType="INTEGER" property="height" />
    <result column="sign_text" jdbcType="VARCHAR" property="signText" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="realname_authentication_flag" jdbcType="INTEGER" property="realnameAuthenticationFlag" />
    <result column="token" jdbcType="VARCHAR" property="token" />
    <result column="online_state" jdbcType="INTEGER" property="onlineState" />
    <result column="create_room" jdbcType="INTEGER" property="createRoom" />
    <result column="registration_time" jdbcType="TIMESTAMP" property="registrationTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="last_login_time" jdbcType="TIMESTAMP" property="lastLoginTime" />
    <result column="concerns" jdbcType="INTEGER" property="concerns" />
    <result column="fans" jdbcType="INTEGER" property="fans" />
    <result column="ip" jdbcType="VARCHAR" property="ip" />
    <result column="flag" jdbcType="INTEGER" property="flag" />
    <result column="version" jdbcType="BIGINT" property="version" />
    <result column="longitude" jdbcType="VARCHAR" property="longitude" />
    <result column="latitude" jdbcType="VARCHAR" property="latitude" />
    <result column="location_desc" jdbcType="VARCHAR" property="locationDesc" />
    <result column="province" jdbcType="VARCHAR" property="province" />
    <result column="city" jdbcType="VARCHAR" property="city" />
    <result column="district" jdbcType="VARCHAR" property="district" />
    <result column="guild_id" jdbcType="VARCHAR" property="guildId" />
    <result column="channel"  property="channel" />
    <result column="platform"  property="platform" />
    <result column="show_id"  property="showId" />
    <result column="roomId"  property="roomId" />
    <result column="isLock"  property="isLock" />
    <result column="isBlock"  property="isBlock" />
    <result column="roomState"  property="roomState" />

  </resultMap>
  <sql id="Base_Column_List">
    id, username, fullname, nickname, password, phone_number,
    phone_imei, drainage_channel_id, portrait_address, sex, birthday, height, sign_text,
    state, realname_authentication_flag, token, online_state, create_room, registration_time,
    update_time, last_login_time, concerns, fans, ip, flag, version,longitude,latitude,location_desc,
    province,city,district,guild_id,platform,channel,show_id
  </sql>
  <select id="getAllUserId" resultType="java.lang.String">
    select
    id
    from t_funtime_user
    where  online_state = 1 and flag = 1
  </select>
  <select id="getAllUserIdByApp" resultType="java.lang.String">
    select
    id
    from t_funtime_user
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    id, username, fullname, nickname, password, phone_number,
    drainage_channel_id,token, portrait_address, sex, birthday, height, sign_text,version,
    state, realname_authentication_flag, online_state, create_room, registration_time,
    update_time, last_login_time, concerns, fans, ip, flag, guild_id,platform,channel,show_id
    from t_funtime_user
    where id = #{id,jdbcType=BIGINT} and flag = 1
  </select>
  <select id="getUserInfoByShowId" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select
    id, username, fullname, nickname, password, phone_number,
    drainage_channel_id, portrait_address, sex, birthday, height, sign_text,
    state, realname_authentication_flag, online_state, create_room, registration_time,
    update_time, last_login_time, concerns, fans, ip, flag, guild_id,platform,channel,show_id
    from t_funtime_user
    where show_id = #{showId} and flag = 1
  </select>

  <select id="checkUserExists" parameterType="java.lang.Long" resultType="java.lang.Long">
    select
    id
    from t_funtime_user
    where id = #{id} and flag = 1
  </select>

  <select id="queryUserByChatUser" resultType="java.util.Map">
    select
     u.nickname,u.portrait_address portraitAddress,u.sign_text as  signText,u.birthday,u.sex,u.show_id showId
     ,(select count(c.id) from t_funtime_user_concern c where c.user_id = #{userId} and c.to_user_id = u.id) isConcern
     ,l.level,l.level_url as levelUrl
    from t_funtime_user u
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id
    where u.id = #{byUserId} and flag = 1
  </select>

  <select id="getContributionList" resultType="java.util.Map">

      SELECT
          d.user_id as userId,
          sum( d.wealth_val ) amountSum,
          u.nickname,
          u.portrait_address as portraitAddress,
          u.show_id as showId,
          u.sex,
          t.level,
          l.level_url as levelUrl
      FROM
          t_funtime_user_account_level_wealth_record d
          inner join t_funtime_user u on u.id = d.user_id
          inner join (t_funtime_user_account t
          inner join t_funtime_user_level_conf l on t.level = l.level) on d.user_id = t.user_id
      WHERE
          d.create_time between #{startDate} and #{endDate}
      GROUP BY
          d.user_id,t.level
      ORDER BY
          amountSum DESC,max(d.id) ASC
      limit ${endCount}
  </select>

  <select id="getCharmList" resultType="java.util.Map">

      SELECT
          d.user_id as userId,
          sum( d.charm_val ) amountSum,
          u.nickname,
          u.portrait_address as portraitAddress,
          u.show_id as showId,
          u.sex,
          t.level,
          l.level_url as levelUrl
      FROM
          t_funtime_user_account_charm_record d
          inner join t_funtime_user u on u.id = d.user_id
          inner join (t_funtime_user_account t
          inner join t_funtime_user_level_conf l on t.level = l.level) on d.user_id = t.user_id
      WHERE
          d.create_time between #{startDate} and #{endDate}
      GROUP BY
          d.user_id,t.level
      ORDER BY
          amountSum DESC,max(d.id) ASC
      limit ${endCount}
  </select>

  <select id="getConcernUserList" resultType="java.util.Map">
    select
     u.id,u.nickname,u.portrait_address as portraitAddress,u.sign_text as  signText,u.sex,u.birthday,u.show_id as showId
     ,u.online_state onlineState
    from  t_funtime_user_concern c inner join t_funtime_user u on u.id = c.to_user_id
    where c.user_id = #{userId}
    <if test="onlineState!=null and onlineState!=''">
      and u.online_state = #{onlineState}
    </if>
    order by u.online_state asc,c.id desc
  </select>
  <select id="getInvitationUserList" resultType="java.util.Map">
    select
    u.id,u.nickname,u.portrait_address as portraitAddress,u.sex,u.show_id as showId,u.sign_text as  signText
    ,u.online_state onlineState,l.level,l.level_url as levelUrl
    from  t_funtime_user_concern c inner join t_funtime_user u on u.id = c.to_user_id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id
    where c.user_id = #{userId} and u.state = 1
    and not exists (select t.id from t_funtime_chatroom_mic t where t.mic_user_id = c.to_user_id and t.room_id = #{roomId})
    <if test="content!=null and content!=''">
      and (BINARY u.show_id = #{content} or u.nickname like concat('%',#{content},'%'))
    </if>
    order by u.online_state asc, c.id desc
  </select>
  <select id="getInvitationUserList2" resultType="java.util.Map">
    select
    u.id,u.nickname,u.portrait_address as portraitAddress,u.sex,u.show_id as showId,u.sign_text as  signText
    ,u.online_state onlineState,l.level,l.level_url as levelUrl
    from  t_funtime_user_concern c inner join t_funtime_user u on u.id = c.user_id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id
    where c.to_user_id = #{userId} and u.state = 1
    and not exists (select t.id from t_funtime_chatroom_mic t where t.mic_user_id = c.user_id and t.room_id = #{roomId})
    <if test="content!=null and content!=''">
      and (BINARY u.show_id = #{content} or u.nickname like concat('%',#{content},'%'))
    </if>
    order by u.online_state asc, c.id desc
  </select>
  <select id="getInvitationUserList3" resultType="java.util.Map">
    select
    u.id,u.nickname,u.portrait_address as portraitAddress,u.sex,u.show_id as showId,u.sign_text as  signText
    ,u.online_state onlineState,l.level,l.level_url as levelUrl
    from t_funtime_user u
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id
    where u.online_state = 1 and u.state = 1
    and u.id not in (select c.to_user_id from t_funtime_user_concern c where c.user_id = #{userId} )
    and u.id not in (select c.user_id from t_funtime_user_concern c where c.to_user_id = #{userId} )
    and not exists (select t.id from t_funtime_chatroom_mic t where t.mic_user_id = u.id and t.room_id = #{roomId})
    <if test="content!=null and content!=''">
      and (BINARY u.show_id = #{content} or u.nickname like concat('%',#{content},'%'))
    </if>
    order by u.online_state asc, u.id desc
  </select>

  <select id="getFansList" resultType="java.util.Map">
    select
     u.id,u.nickname,u.portrait_address as portraitAddress,u.sign_text as  signText,u.sex,u.birthday,u.show_id as showId
     ,u.online_state onlineState
    from  t_funtime_user_concern c inner join t_funtime_user u on u.id = c.user_id
    where c.to_user_id = #{userId}
    order by u.online_state asc,c.id desc
  </select>


  <select id="queryUserInfo" parameterType="java.util.Map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_funtime_user
    where 1=1
    <if test="phone!=null and phone != ''">
      and phone_number = #{phone}
    </if>

    limit 1
  </select>
  <select id="queryUserInfoByPhone" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from t_funtime_user
    where phone_number = #{phone}

    limit 1
  </select>

  <select id="queryUserInfoByOnline"  resultMap="BaseResultMap">
    select
          u.id , u.nickname, u.portrait_address, u.sex, u.birthday,u.height, u.sign_text ,
          u.state,  u.online_state , u.create_room , u.concerns, u.fans,u.guild_id ,u.show_id,
          m.id roomId,m.is_lock as isLock,m.is_block as isBlock,m.state as roomState,
          l.level,l.level_url as levelUrl
    from t_funtime_user u left join t_funtime_chatroom m on u.id = m.user_id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id

    where u.online_state = 1 and u.flag = 1 and u.state = 1
      <if test="sex!=null">
        and u.sex = #{sex}
      </if>
      <if test="startAge!=null">
        and #{startAge}>=u.birthday
      </if>
      <if test="endAge!=null">
        and u.birthday>=#{endAge}
      </if>
    order by u.last_login_time desc

  </select>

  <select id="queryUserInfoByIndex"  resultMap="BaseResultMap">
    select
    u.id , u.nickname, u.portrait_address, u.sex, u.birthday,u.height, u.sign_text  ,
    u.state,  u.online_state , u.create_room , u.concerns, u.fans,u.guild_id ,u.show_id,
    m.id roomId,m.is_lock as isLock,m.is_block as isBlock,m.state as roomState,
    l.level,l.level_url as levelUrl
    from t_funtime_user u left join t_funtime_chatroom m on u.id = m.user_id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id

    where  u.flag = 1 and u.state = 1 and m.is_block = 2
    <if test="content!=null and content!=''">
      and (BINARY u.show_id = #{content} or u.nickname like concat('%',#{content},'%') or m.name like concat('%',#{content},'%'))
    </if>
    order by u.id desc

  </select>

  <select id="queryAuthorityByRole" parameterType="java.lang.Integer" resultType="java.util.Map">
    select user_role userRole,authority, authority_desc authorityDesc from t_funtime_chatroom_auth where 1=1
    <if test="userRole!=null">
      and user_role = #{userRole}
    </if>
  </select>
  <select id="checkAuthorityForUserRole"  resultType="java.lang.Integer">
    select id from t_funtime_chatroom_auth where

       user_role = #{userRole} and authority = #{authority} limit 1

  </select>
  <select id="getExpression"  resultType="java.util.Map">
    select expression_no expressionNo,expression_desc expressionDesc,expression_url expressionUrl,sort
    from t_funtime_expression
    where flag = 1
       order by sort

  </select>
  <select id="getCustomerService"  resultType="java.util.Map">
    select email ,qq,phone_number phoneNumber
    from t_funtime_customer_service

  </select>

  <select id="getBanners"  resultType="java.util.Map">
    select id ,banner_type as bannerType,banner_url as bannerUrl,banner_desc as bannerDesc
    ,redirect_url AS redirectUrl
    from t_funtime_banner
    where flag = 1 and  now() between start_time and end_time
    order by id

  </select>

  <select id="getUserImageDefaultUrls" parameterType="java.lang.Integer" resultType="java.lang.String">
    select image_url from t_funtime_user_image_default where sex = #{sex}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_funtime_user
    where id = #{id,jdbcType=BIGINT}
  </delete>

  <insert id="insertSelective" parameterType="com.rzyou.funtime.entity.FuntimeUser" keyProperty="id" useGeneratedKeys="true">
    insert into t_funtime_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="showId != null">
        show_id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="fullname != null">
        fullname,
      </if>
      <if test="nickname != null">
        nickname,
      </if>
      <if test="password != null">
        password,
      </if>

      <if test="phoneNumber != null">
        phone_number,
      </if>
      <if test="phoneImei != null">
        phone_imei,
      </if>
      <if test="drainageChannelId != null">
        drainage_channel_id,
      </if>
      <if test="portraitAddress != null">
        portrait_address,
      </if>
      <if test="sex != null">
        sex,
      </if>
      <if test="birthday != null">
        birthday,
      </if>
      <if test="height != null">
        height,
      </if>
      <if test="signText != null">
        sign_text,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="realnameAuthenticationFlag != null">
        realname_authentication_flag,
      </if>
      <if test="token != null">
        token,
      </if>
      <if test="onlineState != null">
        online_state,
      </if>
      <if test="createRoom != null">
        create_room,
      </if>

      <if test="updateTime != null">
        update_time,
      </if>
      <if test="lastLoginTime != null">
        last_login_time,
      </if>
      <if test="concerns != null">
        concerns,
      </if>
      <if test="fans != null">
        fans,
      </if>
      <if test="ip != null">
        ip,
      </if>
      <if test="flag != null">
        flag,
      </if>
      <if test="version != null">
        version,
      </if>

      <if test="longitude != null">
        longitude,
      </if>
      <if test="latitude != null">
        latitude,
      </if>
      <if test="locationDesc != null">
        location_desc,
      </if>
      <if test="province != null">
        province,
      </if>
      <if test="city != null">
        city,
      </if>
      <if test="district != null">
        district,
      </if>
      <if test="guildId != null">
        guild_id,
      </if>
      <if test="channel != null">
        channel,
      </if>
      <if test="platform != null">
        platform,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="showId != null">
        #{showId},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="fullname != null">
        #{fullname,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>

      <if test="phoneNumber != null">
        #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="phoneImei != null">
        #{phoneImei,jdbcType=VARCHAR},
      </if>
      <if test="drainageChannelId != null">
        #{drainageChannelId,jdbcType=INTEGER},
      </if>
      <if test="portraitAddress != null">
        #{portraitAddress,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        #{height,jdbcType=INTEGER},
      </if>
      <if test="signText != null">
        #{signText,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="realnameAuthenticationFlag != null">
        #{realnameAuthenticationFlag,jdbcType=INTEGER},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
      <if test="onlineState != null">
        #{onlineState,jdbcType=INTEGER},
      </if>
      <if test="createRoom != null">
        #{createRoom,jdbcType=INTEGER},
      </if>

      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginTime != null">
        #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="concerns != null">
        #{concerns,jdbcType=INTEGER},
      </if>
      <if test="fans != null">
        #{fans,jdbcType=INTEGER},
      </if>
      <if test="ip != null">
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="flag != null">
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="version != null">
        #{version,jdbcType=BIGINT},
      </if>

      <if test="longitude != null">
        #{longitude},
      </if>
      <if test="latitude != null">
        #{latitude},
      </if>
      <if test="locationDesc != null">
        #{locationDesc},
      </if>
      <if test="province != null">
        #{province},
      </if>
      <if test="city != null">
        #{city},
      </if>
      <if test="district != null">
        #{district},
      </if>
      <if test="guildId != null">
        #{guildId},
      </if>
      <if test="channel != null">
        #{channel},
      </if>
      <if test="platform != null">
        #{platform},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.rzyou.funtime.entity.FuntimeUser">
    update t_funtime_user
    <set>
      <if test="showId != null">
        show_id = #{showId},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="fullname != null">
        fullname = #{fullname,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null">
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>

      <if test="phoneNumber != null">
        phone_number = #{phoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="phoneImei != null">
        phone_imei = #{phoneImei,jdbcType=VARCHAR},
      </if>
      <if test="drainageChannelId != null">
        drainage_channel_id = #{drainageChannelId,jdbcType=INTEGER},
      </if>
      <if test="portraitAddress != null">
        portrait_address = #{portraitAddress,jdbcType=VARCHAR},
      </if>
      <if test="sex != null">
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="birthday != null">
        birthday = #{birthday,jdbcType=INTEGER},
      </if>
      <if test="height != null">
        height = #{height,jdbcType=INTEGER},
      </if>
      <if test="signText != null">
        sign_text = #{signText,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="realnameAuthenticationFlag != null">
        realname_authentication_flag = #{realnameAuthenticationFlag,jdbcType=INTEGER},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
      <if test="onlineState != null">
        online_state = #{onlineState,jdbcType=INTEGER},
      </if>
      <if test="createRoom != null">
        create_room = #{createRoom,jdbcType=INTEGER},
      </if>
      <if test="registrationTime != null">
        registration_time = #{registrationTime,jdbcType=TIMESTAMP},
      </if>

        update_time =now(),

      <if test="lastLoginTime != null">
        last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="concerns != null">
        concerns = #{concerns,jdbcType=INTEGER},
      </if>
      <if test="fans != null">
        fans = #{fans,jdbcType=INTEGER},
      </if>
      <if test="ip != null">
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="flag != null">
        flag = #{flag,jdbcType=INTEGER},
      </if>

      <if test="longitude != null">
        longitude = #{longitude},
      </if>
      <if test="latitude != null">
        latitude = #{latitude},
      </if>
      <if test="locationDesc != null">
        location_desc = #{locationDesc},
      </if>
      <if test="province != null">
        province = #{province},
      </if>
      <if test="city != null">
        city = #{city},
      </if>
      <if test="district != null">
        district = #{district},
      </if>
      <if test="guildId != null">
        guild_id = #{guildId},
      </if>
      <if test="channel != null">
        channel =  #{channel},
      </if>
      <if test="platform != null">
        platform = #{platform},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>

  <update id="updatePhoneNumberById">
    update t_funtime_user set phone_number = #{phone} ,version = #{newVersion},update_time =now() where id = #{id} and version = #{version}
  </update>
  <update id="updateOnlineState">
    update t_funtime_user set online_state = #{onlineState},update_time =now() where id = #{id}
  </update>

  <update id="updateConcernsPlus" parameterType="java.lang.Long">
    update t_funtime_user set concerns = concerns+1,update_time =now() where id = #{id}
  </update>
  <update id="updateFansPlus" parameterType="java.lang.Long">
    update t_funtime_user set fans = fans+1,update_time =now() where id = #{id}
  </update>
  <update id="updateConcernsSub" parameterType="java.lang.Long">
    update t_funtime_user set concerns = concerns-1,update_time =now() where id = #{id} and concerns>0
  </update>
  <update id="updateFansSub" parameterType="java.lang.Long">
    update t_funtime_user set fans = fans-1,update_time =now() where id = #{id} and fans>0
  </update>
  <update id="updateCreateRoomPlus" parameterType="java.lang.Long">
    update t_funtime_user set create_room = create_room+1,update_time =now() where id = #{id}
  </update>
  <update id="updateCreateRoomSub" parameterType="java.lang.Long">
    update t_funtime_user set create_room = create_room+1,update_time =now() where id = #{id} and create_room>0
  </update>
<update id="updateTokenById" >
  update t_funtime_user set token = #{token},update_time =now(),show_id = #{id}+690002 where id = #{id}
</update>
  <update id="updateRealnameAuthenticationFlagById" >
  update t_funtime_user set realname_authentication_flag = 1,update_time =now() where id = #{id}
</update>
  <insert id="saveHeart" >
    insert INTO t_funtime_heart (user_id,ip) VALUES(#{userId},#{ip})
  </insert>
  <insert id="heartTask" >
    insert INTO t_funtime_heart_history (user_id,heart_date,counts,ip,imei)
    select t.user_id, DATE_FORMAT(t.heart,'%Y%m%d') heart_date,count(t.id) counts,GROUP_CONCAT(DISTINCT t.ip) ip
    ,u.phone_imei as imei
    from t_funtime_heart t inner join t_funtime_user u on t.user_id = u.id
    where t.heart BETWEEN DATE_FORMAT(DATE_SUB(NOW(),INTERVAL 1 day),'%Y-%m-%d 00:00:01')
    and DATE_FORMAT(DATE_SUB(NOW(),INTERVAL 1 day),'%Y-%m-%d 23:59:59')
    GROUP BY t.user_id,DATE_FORMAT(t.heart,'%Y%m%d');

  </insert>
  <insert id="saveImHeart" >
    REPLACE INTO t_funtime_im_heart (user_id,user_state,action,reason,is_sync)
    VALUES(#{userId},#{userState},#{action},#{reason},2)
  </insert>
  <update id="updateImHeartSync">
    update t_funtime_im_heart set is_sync=1 where user_id = #{userId}
  </update>
  <insert id="saveUserInfoChangeLog">
    insert into t_funtime_user_info_change_log (user_id,change_column,change_val)
    VALUES(#{userId},#{changeColumn},#{changeVal})
  </insert>
  <select id="getOfflineUser" resultType="java.lang.Long">
    select t.user_id from t_funtime_im_heart t
    where t.user_state = 2 and t.is_sync = 2  and DATE_SUB(NOW(),INTERVAL 30 SECOND)>t.operation_time
  </select>
  <select id="getOfflineUserByApp" resultType="java.lang.Long" parameterType="java.lang.Integer">
    SELECT
	t.user_id
    FROM
        t_funtime_heart t
    WHERE
        t.user_id IN ( SELECT id FROM t_funtime_user WHERE online_state = 1 )
    GROUP BY
        t.user_id
    HAVING
        DATE_SUB( NOW( ), INTERVAL ${mins} MINUTE ) > max( t.heart )
  </select>
  <select id="getRankRewardConf" resultType="java.util.Map" parameterType="java.lang.Integer">
    select rank_type as rankType,ranking,reward from t_funtime_rank_reward_conf where  date_type = #{dateType}
    order by ranking asc
  </select>

</mapper>