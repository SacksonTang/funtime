<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rzyou.funtime.mapper.FuntimeChatroomUserMapper">
  <resultMap id="BaseResultMap" type="com.rzyou.funtime.entity.FuntimeChatroomUser">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="room_id" jdbcType="BIGINT" property="roomId" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_role" jdbcType="INTEGER" property="userRole" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, room_id, user_id, user_role, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_funtime_chatroom_user
    where id = #{id,jdbcType=BIGINT}
  </select>
  <select id="getRoomUserById"  resultType="java.util.Map">
    select
     u.id id,u.nickname,u.portrait_address portraitAddress,u.sign_text signText,u.sex,u.show_id showId
    ,l.level,l.level_url as levelUrl
    from t_funtime_chatroom_user m inner join t_funtime_user u on m.user_id = u.id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id

    where m.room_id = #{roomId}  and m.user_role = 4
    <if test="nickname!=null and nickname!=''">
      and BINARY u.nickname like concat('%',#{nickname},'%')
    </if>
     order by m.create_time desc
  </select>
  <select id="getRoomUserByIdAll"  resultType="java.util.Map">
    select
    u.id id,u.nickname,u.portrait_address portraitAddress
    ,u.sign_text signText,u.sex,u.show_id showId,m.user_role userRole
    ,l.level,l.level_url as levelUrl
    from t_funtime_chatroom_user m inner join t_funtime_user u on m.user_id = u.id
    inner join (t_funtime_user_account t inner join t_funtime_user_level_conf l on t.level = l.level) on u.id = t.user_id

    where m.room_id = #{roomId}
    <if test="nickname!=null and nickname!=''">
      and BINARY u.nickname like concat('%',#{nickname},'%')
    </if>
    order by m.user_role asc, m.create_time desc
  </select>
  <select id="checkUserIsExist" resultType="java.lang.Long">
    select
    id
    from t_funtime_chatroom_user
    where room_id = #{roomId} and user_id = #{userId}  limit 1
  </select>

  <select id="getRoomUserByRoomIdAll" resultType="java.lang.String" parameterType="java.lang.Long">
    select
    user_id
    from t_funtime_chatroom_user
    where room_id = #{roomId}

  </select>


  <select id="getAllRoomUser" resultType="java.lang.String" >
    select
    user_id
    from t_funtime_chatroom_user
    group by user_id
  </select>

  <select id="getRoomUserByRoomId" resultType="java.lang.Long" >
    select
    user_id
    from t_funtime_chatroom_user
    where room_id = #{roomId} and user_id !=#{userId}
  </select>

  <select id="getRoomByUserId" resultType="java.lang.Long" parameterType="java.lang.Long">
    select
    room_id
    from t_funtime_chatroom_user
    where user_id = #{userId} limit 1
  </select>
  <select id="getRoomUserInfoByUserId" resultMap="BaseResultMap" parameterType="java.lang.Long">
    select
    <include refid="Base_Column_List" />
    from t_funtime_chatroom_user
    where user_id = #{userId}  limit 1
  </select>


  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_funtime_chatroom_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByRoomId" parameterType="java.lang.Long">
    delete from t_funtime_chatroom_user
    where room_id = #{roomId}
  </delete>

  <insert id="insertSelective" parameterType="com.rzyou.funtime.entity.FuntimeChatroomUser" keyProperty="id" useGeneratedKeys="true">
    insert into t_funtime_chatroom_user
    <trim prefix="(" suffix=")" suffixOverrides=",">

      <if test="roomId != null">
        room_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="userRole != null">
        user_role,
      </if>

    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">

      <if test="roomId != null">
        #{roomId,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="userRole != null">
        #{userRole,jdbcType=INTEGER},
      </if>

    </trim>
  </insert>
  <update id="updateUserRoleById">
    update t_funtime_chatroom_user set user_role = #{userRole} where id = #{id}
  </update>


</mapper>